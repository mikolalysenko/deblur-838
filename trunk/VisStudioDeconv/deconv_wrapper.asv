function [ outputImg ] = deconv_wrapper( inputImg, kernel, options )
%DECONV_WRAPPER Wrapper for C++ implementation of RL, BRL, and JBRL
%
% INPUT
% inputImg  input (blurry) image
% kernel    kernel/point spread function - this should be an image
% options
%    options.method      deconvolution method (choose from 'RL', 'BRL', 'JBRL' -- 'RL' 
%                        by default)
%    options.numIters    number of iterations (50 by default)
%    options.regFactor   regularization factor (0.15 by default)
%    options.nbrRadius   regularization neighborhood radius; 0.5*<kernel radius> be
%                        default
%    options.spatialVar  spatial variance; (options.nbrRadius/3)^2 by default
%    options.intRngVar   intensity variance; 0.1*(max intensity - min intensity)^2 by
%                        default
%
% OUTPUT:
% outputImg  deblurred result

if( strcmp(class(kernel), 'double') == 0 )
    error('kernel must be of type double');
end

kernel_exporter( kernel, 'release/deconv_wrapper_kernel.txt' );

if( ischar(inputImg) )
    inputImg = imread(inputImg);
end
imwrite(inputImg, 'release/deconv_wrapper_input.ppm');

if(~exist('options', 'var'))
    options.method = 'RL';
    options.numIters = 50;
    options.regFactor = 0.15;
end

if( ~(strcmp(options.method, 'RL') || ...
    strcmp(options.method, 'BRL')  || ...
    strcmp(options.method, 'JBRL')) )
    error('%s is not a valid method!', options.method);
end

if(~isfield(options, 'numIters'))
    options.numIters = 50;
end

if(~isfield(options, 'regFactor'))  
    options.regFactor = 0.15;
end

fid = fopen('release/deconv_wrapper_af.txt', 'w+');
fprintf(fid, '-method %s\n', options.method);
fprintf(fid, '-kernelFile deconv_wrapper_kernel.txt\n');
fprintf(fid, '-inputFile deconv_wrapper_input.ppm\n');
fprintf(fid, '-outputFile deconv_wrapper_output.ppm\n');
fprintf(fid, '-numIters %d\n', options.numIters);
fprintf(fid, '-regFactor %f\n', options.regFactor);
if( exist('options.nbrRadius', 'var') )
    fprintf(fid, '-nbrRadius %d\n', round(options.nbrRadius));
end
if( exist('options.spatialVar', 'var') )
    fprintf(fid, '-spatialVar %f\n', options.spatialVar);
end
if( exist('options.intRngVar', 'var') )
    fprintf(fid, '-intRngVar %f\n\n', options.intRngVar);
end
fclose(fid);

cd release;
if (strncmp(computer,'PC',2))
    system('deconv.exe -af deconv_wrapper_af.txt');
else
    system('deconv -af deconv_wrapper_af.txt');
end
outputImg = imread('release/deconv_wrapper_output.ppm');
delete deconv_wrapper_af.txt;
delete deconv_wrapper_kernel.txt;
delete deconv_wrapper_input.ppm;
delete deconv_wrapper_output.ppm;
cd ..;

